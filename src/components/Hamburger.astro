---
interface Props {
	section?: string;
}

let isCs, isBio, isContact;

const {section} = Astro.props;
switch (section) {
    case 'case-studies':
        isCs = true;
        break;
    case 'bio':
        isBio = true;
        break;
    case 'contact':
        isContact = true;
        break;
}


---

<script>
document.addEventListener('astro:page-load', () => {
  /**
   * Toggles the 'expanded' class on the navigation menu when the hamburger icon is clicked.
   * Closes the menu when clicking outside with a fade-out effect.
   */
  const hamburger = document.querySelector('.hamburger');
  const navLinks = document.querySelector('.nav-links');
  const pageEl = document.querySelector('.page');
  const pageBgColor = getComputedStyle(pageEl).backgroundColor;

  if (hamburger && navLinks) {

    // Open/close menu on hamburger click
    hamburger.addEventListener('click', () => {
      pageEl.style.backgroundColor = 'white';

      if (!navLinks.classList.contains('expanded')) {
        navLinks.classList.add('fade-in');
        navLinks.classList.add('expanded');
        hamburger.classList.add('is-open'); // Change to "X"

      } else {

        pageEl.style.backgroundColor = pageBgColor;
        navLinks.classList.remove('fade-in');
        navLinks.classList.add('fade-out');
        hamburger.classList.remove('is-open'); // Revert to hamburger

        setTimeout(() => {
          navLinks.classList.remove('expanded', 'fade-out');
        }, 300); // Match the CSS animation duration
      }
    });

    // Close menu when clicking outside of it
    document.addEventListener('click', (event) => {
      if (!navLinks.contains(event.target) && !hamburger.contains(event.target) && navLinks.classList.contains('expanded')) {
        pageEl.style.backgroundColor = pageBgColor;
        navLinks.classList.remove('fade-in');
        navLinks.classList.add('fade-out');
        setTimeout(() => {
          navLinks.classList.remove('expanded', 'fade-out');
        }, 300); // Match the CSS animation duration
      }
    });
  } else {
    console.warn('Hamburger or nav-links element not found in the DOM.');
  }
});




</script>

<div class="hamburger self-end">
    <span class:list={[ 'case-studies',{active: isCs}] }></span>
    <span class:list={[ 'bio',{active: isBio}] }></span>
    <span class:list={[ 'contact',{active: isContact}] }></span>
</div>

<nav class="nav-links z-20">

  <ul class="mt-14">
    <li><a class='control' href="/">Home</a></li>
    <li><a class:list={['control', 'case-studies',{active: isCs}] } href="/casestudies">Case Studies</a></li>
    <li><a class:list={[ 'control','bio',{active: isBio}] } href="/bio">Bio</a></li>
    <li><a class:list={[ 'control','contact',{active: isContact}] }  href="/contact">Contact</a></li>
  </ul>
</nav>
<style>

.hamburger .case-studies.active {
    background-color: var(--color-case-studies);
}
.hamburger .bio.active {
    background-color: var(--color-bio);
}
.hamburger .contact.active {
    background-color: var(--color-contact);
}
.hamburger {
	cursor: pointer;
  }
  
  .hamburger span {
    display: block;
    width: 25px;
    height: 3px;
    margin-bottom: 3px;
    background-color: #000;
    transition: transform 0.3s ease, opacity 0.3s ease;

  }

  .hamburger.is-open span:nth-child(1) {
  transform: translateY(8px) rotate(45deg);
}

.hamburger.is-open span:nth-child(2) {
  opacity: 0;
}

.hamburger.is-open span:nth-child(3) {
  transform: translateY(-4px) rotate(-45deg);
}


  .nav-links {
    width: 100vw;
    height: 100vh;
    position: absolute;
    top: 3.8rem;
    max-width: 100%;
    right: 0;
    background-color: #fff;
    xbox-shadow: 0 0 10px rgba(0, 0, 0, .1);
    display: none;
    margin: 0;
  }
  
  .nav-links a {
    display: block;
    border-radius: 15px;
    text-decoration: none;
    Xtext-transform: uppercase;
  }
  

  .expanded {
    display: unset;
  }
 
  .nav-links {
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none; /* Prevent interaction when hidden */
}

.nav-links.expanded {
  pointer-events: auto; /* Enable interaction when visible */
}

.nav-links.fade-in {
  animation: fadeIn 0.3s ease forwards;
}

.nav-links.fade-out {
  animation: fadeOut 0.3s ease forwards;
}


@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
  /*
  @media screen and (min-width: 636px) {
	.nav-links {
	  margin-left: 5em;
	  display: block;
	  position: static;
	  width: auto;
	  background: none;
	}
  
	.nav-links a {
	  display: inline-block;
	  padding: 15px 20px;
	}
  

  }
*/
</style>