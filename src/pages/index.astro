---
import CaseStudy from '../components/CaseStudy.astro';
import Layout from '../layouts/Layout.astro';

---

<Layout title="Alvar Sirlin, Front End Dev" section="" bgColor="">
	
	<div class="page w-full flex flex-col md:flex-row  justify-around gap-8 leading-loose control">
		<section class="w-8/12 hero max-w-prose text-balance ">
			<h1 class="text-4xl leading-normal hover-slide-text">
				<strong>Alvar Sirlin</strong> | 
				Front End Engineer
			</h1>
			<p
            id="typewriter"
            class="text-6xl  Xfont-medium ">
            <!-- The text will be inserted here by JavaScript -->
          </p>
		  <div id="fade-element" style="opacity: 0;">
			<form method="POST" id="form" class="mt-8 grow">
                <input type="hidden" name="access_key" value="5b8a7ead-cd3f-40d5-a6c8-c005dd0ee74a">
                <input type="email" name="email" placeholder="Enter email" required>
                <div id="result"></div>
            </form>
		  </div>

			<!--
			<ul class="flex-col w-full md:w-10/12 text-lg">

				<li class="flex justify-between">codename: <strong>Cuttlefish</strong> </li>
				<li class="flex justify-between">status: <strong>Navigating disruption</strong> </li>
				<li class="flex justify-between">outlook: <strong>Seeking</strong> </li>
				<li class="flex justify-between">opportunity: <strong>Cross Sector</strong></li> 
				With the current shakeup in tech I've been exploring Front End tooling landscape to build highly customized and performant websites with quick iteration. 
-->	
			
			</ul>
			<CaseStudy />
		</section>
		<nav class="md:Xmt-16 big">
			<ul>
				<li><a class="hidden" href="/">Home</a></li>
				<li><a transition:name='cs' href="/casestudies">Case Studies</a></li>
				<li><a transition:name='bio' href="/bio">Bio</a></li>
				<li><a transition:name='contact' href="/contact">Contact</a></li>
			</ul>
		</nav>
	</div>
</Layout>
<script is:inline>
const form = document.getElementById('form');
const result = document.getElementById('result');

form.addEventListener('submit', function(e) {
	const formData = new FormData(form);
	e.preventDefault();

	const object = Object.fromEntries(formData);
	const json = JSON.stringify(object);

	result.innerHTML = "Please wait..."

	fetch('https://api.web3forms.com/submit', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Accept': 'application/json'
			},
			body: json
		})
		.then(async (response) => {
			let json = await response.json();
			if (response.status == 200) {
				result.innerHTML = json.message;
			} else {
				console.log(response);
				result.innerHTML = json.message;
			}
		})
		.catch(error => {
			console.log(error);
			result.innerHTML = "Something went wrong!";
		})
		.then(function() {
			form.reset();
			setTimeout(() => {
				result.style.display = "none";
			}, 3000);
		});
});
</script>  
<script type="module">
//const textArray = ["Customized.", "Performant.", "Responsive."];
const textArray = ["codename: Cuttlefish", "env: Disruption", "init: Contact"];
const typewriter = document.getElementById("typewriter");
const fadeTarget = document.getElementById("fade-element"); // Element to fade up
let wordIndex = 0;
let charIndex = 0;
let minSpeed = 20;  // Minimum speed for the fastest part
let maxSpeed = 150; // Maximum speed for the slowest part

function getEasedDelay(progress) {
  return maxSpeed - (maxSpeed - minSpeed) * Math.pow(progress, 2);
}

function typeWrite() {
  if (wordIndex < textArray.length) {
    if (charIndex < textArray[wordIndex].length) {
      typewriter.innerHTML += textArray[wordIndex].charAt(charIndex);
      let progress = charIndex / textArray[wordIndex].length;
      charIndex++;
      setTimeout(typeWrite, getEasedDelay(1 - progress)); // Reverse easing
    } else {
      typewriter.innerHTML += "<br>"; // Insert break between words
      charIndex = 0;
      wordIndex++;
      setTimeout(typeWrite, 400); // Pause before the next word
    }
  } else {
    setTimeout(fadeUpElement, 500); // Slight delay before fade-up
  }
}

function fadeUpElement() {
  fadeTarget.style.opacity = "0"; 
  fadeTarget.style.transform = "translateY(20px)";
  fadeTarget.style.transition = "opacity 1s ease-out, transform 1s ease-out";
  
  // Delay execution to allow styles to apply before transition starts
  requestAnimationFrame(() => {
    fadeTarget.style.opacity = "1";
    fadeTarget.style.transform = "translateY(0)";
  });
}

typeWrite();
</script>
<style lang="styl">	
#form input 
	background transparent
	border-bottom 1px solid #000
	font-size	36px
	color #000
	&::placeholder
		color #000

nav.big li:nth-child(2) a 
	color: var(--color-case-studies)
	&:hover 
		background-color: var(--color-case-studies)
	 	color: white

nav.big li:nth-child(3) a 
	color: var(--color-bio)

nav.big li:nth-child(3) a:hover 
	background-color: var(--color-bio)
	color: white

nav li:nth-child(4) a 
	color: var(--color-contact)


nav.big li:nth-child(4) a:hover 
	background-color: var(--color-contact)
	color: white


footer 
	border-top 1px solid #fff

html 
	background-color #333;
	background-image: linear-gradient(135deg, #f34f76, #FF3103);
	background-image: linear-gradient(135deg, #ff8a00, #e52e71);
	background-size: 400% 400%;
	height: 200%;
	width: 100%;
	color: #fff;
	animation gradient 10s ease infinite

@keyframes gradient 
	0% 
	background-position: 51% 0%;

	50% 
	background-position: 50% 100%;

	100% 
	background-position: 51% 0%;


nav a 	
	width 100%
	@media screen and (min-width: 767px) 
		width 20rem


/* Stylus gremlins */
.hover-slide-text {
    margin-left: -15px;
}

h1 + p {
	margin-top: -0px;
}

.hover-slide-text 
	position relative
	display inline-block
	color black
	text-decoration none
	padding 10px 15px
	overflow hidden
	transition all 0.3s ease
	&::before 
		content ''
		position absolute
		top 0
		left -100%
		width 100%
		height 100%
		background-color black
		transition all 0.3s ease
		z-index -1
	&:hover 
		color white
		&::before 
			left 0

</style>